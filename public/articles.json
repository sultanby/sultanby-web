[
    {
      "id": "1",
      "title": "deploy on Netlify",
      "summary": "Learn how to deploy your project to Netlify without using a GitHub repository by leveraging the Netlify CLI. This guide walks you through logging in, unlinking previous projects, linking your current project, deploying your site, selecting the build directory, and going live.",
      "content": "ðŸš€ Here's a straightforward guide to help you deploy your project to Netlify without a GitHub repo, using the power of the Netlify CLI. Follow these steps and get your project live in no time!\n\n1. **Login to Netlify**\n   - Start by logging into your Netlify account:\n\n```sh\nnetlify login\n```\n\n2. **Unlink Any Previous Project**\n   - Working with multiple projects? Ensure a clean slate by unlinking any previous project:\n\n```sh\nnetlify unlink\n```\n\n3. **Link Your Current Project**\n   - Link up your current project simply by executing:\n\n```sh\nnetlify link\n```\n\n4. **Deploy Your Site**\n   - Ready to see some action? Deploy your site with:\n\n```sh\nnetlify deploy\n```\n\n5. **Select Build Directory**\n   - Pick the right directory containing your build (it might be `dist`, `build`, or something else).\n\n6. **Go Live**\n   - To go fully live, run:\n\n```sh\nnetlify deploy --prod\n```\n\n7. **Check Your Live Site**\n   - Take a moment to revel in your success and check your live site using the provided link.\n\n8. **Continuous Deployment (Optional)**\n   - If you wish to connect to a Git provider in the future for continuous deployment, you can simply run:\n\n```sh\nnetlify init\n```\n\nHappy deploying! ðŸŽ‰",
      "date": "Jun 2"
    },
    {
      "id": "2",
      "title": "cloud function on Supabase",
      "summary": "This guide details how to enhance your applications by creating and deploying a cloud function on Supabase. It covers the steps from installing the CLI, creating a project, saving credentials, logging in via CLI, creating a new function, initializing the project locally, linking the project, deploying the function, setting environment variables, and additional steps for integrating a Telegram bot.",
      "content": "\n\nCreating a cloud function on Supabase can greatly enhance the capabilities of your applications by allowing you to run server-side logic in response to various events. Here is a step-by-step guide on how to create and deploy a cloud function on Supabase.\n\n\n\n**Install the Supabase CLI**\n\nBefore you start, you need to install the Supabase CLI. This tool is essential for managing your Supabase project from the command line.\n\n```sh\nnpm install -g supabase\n```\n\n\n\n**Create a Supabase Project**\n\nGo to the [Supabase website](https://supabase.io/) and create a new project. This process will provide you with a project reference ID and a project password. Make sure to save these credentials as you will need them later.\n\n\n\n**Save Project Password and Project Reference ID**\n\nDuring the project creation, you will receive a project reference ID (ref) and a password. Save these details securely because they are required for linking and managing your project via the CLI.\n\n\n\n**Supabase Login from CLI**\n\nLog in to your Supabase account using the CLI. This will authenticate your CLI session with your Supabase account.\n\n```sh\nsupabase login\n```\n\nFollow the prompts to complete the login process.\n\n\n\n**Create a New Supabase Function**\n\nCreate a new Supabase function by running the following command. Replace `<func name>` with your desired function name.\n\n```sh\nsupabase functions new <func name>\n```\n\nThis command generates the necessary files and folders for your new function.\n\n\n\n**Initialize Supabase Project Locally**\n\nInitialize your local directory as a Supabase project. This sets up the required configuration files.\n\n```sh\nsupabase init\n```\n\n\n\n**Link Your Local Directory to Your Supabase Project**\n\nAlthough this step is not required, linking your local directory to your Supabase project is useful for easier management. Replace `<project-ref>` with your project reference ID.\n\n```sh\nsupabase link --project-ref <project-ref>\n```\n\n\n\n**Deploy Your Supabase Function**\n\nDeploy your newly created function to Supabase. The `--no-verify-jwt` flag skips JWT verification for testing purposes.\n\n```sh\nsupabase functions deploy --no-verify-jwt <func name>\n```\n\nNote: If this step fails, ensure Docker is running on your machine, as Docker is required for the deployment process.\n\n\n\n**Ensure Docker is Running**\n\nIf the deployment in the previous step doesnâ€™t work, it might be because Docker is not running. Start Docker on your PC and try deploying the function again.\n\n\n\n**Set Environment Variables**\n\nSupabase uses environment variables for configuration. You can set these variables using the following command:\n\n```sh\nsupabase secrets set ENV_VAR=value\n```\n\nThe `--env-file` flag has been deprecated, so set each environment variable individually as needed.\n\n\n\n**Additional Steps for Telegram Bot Integration**\n\nIf you are integrating a Telegram bot, remember to set the webhook for your bot. This is crucial for ensuring your bot receives updates and messages correctly.\n\n```sh\ncurl -F \"url=https://<your-function-url>\" https://api.telegram.org/bot<your-bot-token>/setWebhook\n```\n\nReplace `<your-function-url>` with the URL of your deployed function and `<your-bot-token>` with your Telegram bot token.\n\n\n\nBy following these steps, you can successfully create and deploy a cloud function on Supabase. This setup allows you to extend the functionality of your applications with custom server-side logic, making your applications more powerful and versatile.",
      "date": "Jun 19"
    }
  ]
